/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.amf.user.events.model.impl;

import com.liferay.amf.user.events.model.UserEvent;
import com.liferay.amf.user.events.model.UserEventModel;
import com.liferay.amf.user.events.model.UserEventSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserEvent service. Represents a row in the &quot;UserEvents_UserEvent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserEventModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserEventImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserEventImpl
 * @generated
 */
@JSON(strict = true)
public class UserEventModelImpl
	extends BaseModelImpl<UserEvent> implements UserEventModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user event model instance should use the <code>UserEvent</code> interface instead.
	 */
	public static final String TABLE_NAME = "UserEvents_UserEvent";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"userEventId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"userIP", Types.VARCHAR}, {"eventDate", Types.TIMESTAMP},
		{"eventType", Types.INTEGER}, {"groupId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userEventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userIP", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("eventType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table UserEvents_UserEvent (uuid_ VARCHAR(75) null,userEventId LONG not null primary key,userId LONG,userName VARCHAR(75) null,userIP VARCHAR(75) null,eventDate DATE null,eventType INTEGER,groupId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table UserEvents_UserEvent";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userEvent.eventDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY UserEvents_UserEvent.eventDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long EVENTTYPE_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long USERID_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long EVENTDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static UserEvent toModel(UserEventSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserEvent model = new UserEventImpl();

		model.setUuid(soapModel.getUuid());
		model.setUserEventId(soapModel.getUserEventId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setUserIP(soapModel.getUserIP());
		model.setEventDate(soapModel.getEventDate());
		model.setEventType(soapModel.getEventType());
		model.setGroupId(soapModel.getGroupId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<UserEvent> toModels(UserEventSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserEvent> models = new ArrayList<UserEvent>(soapModels.length);

		for (UserEventSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public UserEventModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userEventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userEventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserEvent.class;
	}

	@Override
	public String getModelClassName() {
		return UserEvent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserEvent, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserEvent, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserEvent, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((UserEvent)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserEvent, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserEvent, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserEvent)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserEvent, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserEvent, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, UserEvent>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			UserEvent.class.getClassLoader(), UserEvent.class,
			ModelWrapper.class);

		try {
			Constructor<UserEvent> constructor =
				(Constructor<UserEvent>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<UserEvent, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserEvent, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserEvent, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<UserEvent, Object>>();
		Map<String, BiConsumer<UserEvent, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<UserEvent, ?>>();

		attributeGetterFunctions.put("uuid", UserEvent::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<UserEvent, String>)UserEvent::setUuid);
		attributeGetterFunctions.put("userEventId", UserEvent::getUserEventId);
		attributeSetterBiConsumers.put(
			"userEventId",
			(BiConsumer<UserEvent, Long>)UserEvent::setUserEventId);
		attributeGetterFunctions.put("userId", UserEvent::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<UserEvent, Long>)UserEvent::setUserId);
		attributeGetterFunctions.put("userName", UserEvent::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<UserEvent, String>)UserEvent::setUserName);
		attributeGetterFunctions.put("userIP", UserEvent::getUserIP);
		attributeSetterBiConsumers.put(
			"userIP", (BiConsumer<UserEvent, String>)UserEvent::setUserIP);
		attributeGetterFunctions.put("eventDate", UserEvent::getEventDate);
		attributeSetterBiConsumers.put(
			"eventDate", (BiConsumer<UserEvent, Date>)UserEvent::setEventDate);
		attributeGetterFunctions.put("eventType", UserEvent::getEventType);
		attributeSetterBiConsumers.put(
			"eventType",
			(BiConsumer<UserEvent, Integer>)UserEvent::setEventType);
		attributeGetterFunctions.put("groupId", UserEvent::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<UserEvent, Long>)UserEvent::setGroupId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getUserEventId() {
		return _userEventId;
	}

	@Override
	public void setUserEventId(long userEventId) {
		_userEventId = userEventId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public String getUserIP() {
		if (_userIP == null) {
			return "";
		}
		else {
			return _userIP;
		}
	}

	@Override
	public void setUserIP(String userIP) {
		_userIP = userIP;
	}

	@JSON
	@Override
	public Date getEventDate() {
		return _eventDate;
	}

	@Override
	public void setEventDate(Date eventDate) {
		_columnBitmask = -1L;

		_eventDate = eventDate;
	}

	@JSON
	@Override
	public int getEventType() {
		return _eventType;
	}

	@Override
	public void setEventType(int eventType) {
		_columnBitmask |= EVENTTYPE_COLUMN_BITMASK;

		if (!_setOriginalEventType) {
			_setOriginalEventType = true;

			_originalEventType = _eventType;
		}

		_eventType = eventType;
	}

	public int getOriginalEventType() {
		return _originalEventType;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, UserEvent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserEvent toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserEvent>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserEventImpl userEventImpl = new UserEventImpl();

		userEventImpl.setUuid(getUuid());
		userEventImpl.setUserEventId(getUserEventId());
		userEventImpl.setUserId(getUserId());
		userEventImpl.setUserName(getUserName());
		userEventImpl.setUserIP(getUserIP());
		userEventImpl.setEventDate(getEventDate());
		userEventImpl.setEventType(getEventType());
		userEventImpl.setGroupId(getGroupId());

		userEventImpl.resetOriginalValues();

		return userEventImpl;
	}

	@Override
	public int compareTo(UserEvent userEvent) {
		int value = 0;

		value = DateUtil.compareTo(getEventDate(), userEvent.getEventDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UserEvent)) {
			return false;
		}

		UserEvent userEvent = (UserEvent)object;

		long primaryKey = userEvent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		UserEventModelImpl userEventModelImpl = this;

		userEventModelImpl._originalUuid = userEventModelImpl._uuid;

		userEventModelImpl._originalUserId = userEventModelImpl._userId;

		userEventModelImpl._setOriginalUserId = false;

		userEventModelImpl._originalEventType = userEventModelImpl._eventType;

		userEventModelImpl._setOriginalEventType = false;

		userEventModelImpl._originalGroupId = userEventModelImpl._groupId;

		userEventModelImpl._setOriginalGroupId = false;

		userEventModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserEvent> toCacheModel() {
		UserEventCacheModel userEventCacheModel = new UserEventCacheModel();

		userEventCacheModel.uuid = getUuid();

		String uuid = userEventCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userEventCacheModel.uuid = null;
		}

		userEventCacheModel.userEventId = getUserEventId();

		userEventCacheModel.userId = getUserId();

		userEventCacheModel.userName = getUserName();

		String userName = userEventCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			userEventCacheModel.userName = null;
		}

		userEventCacheModel.userIP = getUserIP();

		String userIP = userEventCacheModel.userIP;

		if ((userIP != null) && (userIP.length() == 0)) {
			userEventCacheModel.userIP = null;
		}

		Date eventDate = getEventDate();

		if (eventDate != null) {
			userEventCacheModel.eventDate = eventDate.getTime();
		}
		else {
			userEventCacheModel.eventDate = Long.MIN_VALUE;
		}

		userEventCacheModel.eventType = getEventType();

		userEventCacheModel.groupId = getGroupId();

		return userEventCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserEvent, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserEvent, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserEvent, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((UserEvent)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UserEvent, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UserEvent, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserEvent, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UserEvent)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserEvent>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _userEventId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private String _userIP;
	private Date _eventDate;
	private int _eventType;
	private int _originalEventType;
	private boolean _setOriginalEventType;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _columnBitmask;
	private UserEvent _escapedModel;

}